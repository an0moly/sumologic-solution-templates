AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "Lambda Function for automatic automatic tagging of provided AWS resources like EC2, RDS, API Gateway, DynamoDB, Lambda and Application load balancer."

Globals:
  Function:
    Timeout: 300
    MemorySize: 128

Mappings:
  RegionMap:
    us-east-1:
      bucketname: appdevzipfiles-us-east-1
    us-east-2:
      bucketname: appdevzipfiles-us-east-2
    us-west-1:
      bucketname: appdevzipfiles-us-west-1
    us-west-2:
      bucketname: appdevzipfiles-us-west-2
    ap-south-1:
      bucketname: appdevzipfiles-ap-south-1
    ap-northeast-2:
      bucketname: appdevzipfiles-ap-northeast-2
    ap-southeast-1:
      bucketname: appdevzipfiles-ap-southeast-1
    ap-southeast-2:
      bucketname: appdevzipfiles-ap-southeast-2
    ap-northeast-1:
      bucketname: appdevzipfiles-ap-northeast-1
    ca-central-1:
      bucketname: appdevzipfiles-ca-central-1
    eu-central-1:
      bucketname: appdevzipfiles-eu-central-1
    eu-west-1:
      bucketname: appdevzipfiles-eu-west-1
    eu-west-2:
      bucketname: appdevzipfiles-eu-west-2
    eu-west-3:
      bucketname: appdevzipfiles-eu-west-3
    eu-north-1:
      bucketname: appdevzipfiles-eu-north-1s
    sa-east-1:
      bucketname: appdevzipfiles-sa-east-1

Parameters:
  AccountAlias:
    Type: String
    Description: "Provide an Alias for AWS account for identification in Sumo Logic Explorer View, metrics and logs. Please do not include special characters."
    AllowedPattern: "[a-zA-Z0-9]+"

  AddTagsForALBResources:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: "Choose if you need to add tags for your AWS Resources."
  AddTagsForAPIGatewayResources:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: "Choose if you need to add tags for your AWS Resources."
  AddTagsForRDSResources:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: "Choose if you need to add tags for your AWS Resources."
  AddTagsForEC2MetricsResources:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: "Choose if you need to add tags for your AWS Resources."
  AddTagsForLambdaResources:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: "Choose if you need to add tags for your AWS Resources."
  AddTagsForDynamoDBResources:
    Type: String
    AllowedValues:
      - 'Yes'
      - 'No'
    Default: 'Yes'
    Description: "Choose if you need to add tags for your AWS Resources."
  FilterExpression:
    Type: String
    Default: ""
    Description: "Provide regular expression for matching aws resources. For eg;- 'InstanceType': 't1.micro.*?'|'name': 'Test.*?']|'stageName': 'prod.*?'|'FunctionName': 'Test.*?'|TableName.*?|'LoadBalancerName': 'Test.*?'|'DBClusterIdentifier': 'Test.*?'|'DBInstanceIdentifier': 'Test.*?'"

Conditions:
  add_alb_tags: !Equals [!Ref AddTagsForALBResources, 'Yes']
  add_api_gateway_tags: !Equals [!Ref AddTagsForAPIGatewayResources, 'Yes']
  add_rds_tags: !Equals [!Ref AddTagsForRDSResources, 'Yes']
  add_ec2_metrics_tags: !Equals [!Ref AddTagsForEC2MetricsResources, 'Yes']
  add_lambda_tags: !Equals [!Ref AddTagsForLambdaResources, 'Yes']
  add_dynamodb_tags: !Equals [!Ref AddTagsForDynamoDBResources, 'Yes']

Resources:

  SumoLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: AwsObservabilityLambdaExecutePolicies
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - tag:TagResources
                  - tag:UntagResources
                  - rds:DescribeDBClusters
                  - rds:DescribeDBInstances
                  - rds:AddTagsToResource
                  - rds:RemoveTagsFromResource
                  - apigateway:GET
                  - apigateway:DELETE
                  - apigateway:POST
                  - apigateway:PUT
                  - ec2:DescribeInstances
                  - ec2:CreateTags
                  - ec2:DeleteTags
                  - elasticloadbalancing:DescribeLoadBalancerAttributes
                  - elasticloadbalancing:DescribeLoadBalancers
                  - elasticloadbalancing:AddTags
                  - elasticloadbalancing:RemoveTags
                  - elasticloadbalancing:ModifyLoadBalancerAttributes
                  - lambda:ListFunctions
                  - lambda:TagResource
                  - lambda:UntagResource
                  - dynamodb:ListTables
                  - dynamodb:TagResource
                  - dynamodb:UntagResource
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: '*'

  AwsTagResourcesLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Join
        - ""
        - - !Sub "sumo-tag-${AccountAlias}-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      Code:
        S3Bucket: !FindInMap [RegionMap, !Ref 'AWS::Region', bucketname]
        S3Key: "sumologic-aws-observability-pre-prod/apps/SumoLogicAWSObservabilityHelper/SumoLogicAWSObservabilityHelper.zip"
      Handler: "awsresource.resource_tagging"
      Runtime: python3.7
      Role: !GetAtt SumoLambdaRole.Arn
      Description: "Lambda Function for automatic automatic tagging of provided AWS resources like EC2, RDS, API Gateway, DynamoDB, Lambda and Application load balancer."
      MemorySize: 128
      Timeout: 600
      Environment:
        Variables:
          AccountAlias: !Ref AccountAlias
          AccountID: !Ref "AWS::AccountId"
          Filter: !Ref FilterExpression

  RdsDbInstanceEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: add_rds_tags
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AwsTagResourcesLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt RdsDbInstanceEventsRuleTrigger.Arn

  RdsDbInstanceEventsRuleTrigger:
    Type: 'AWS::Events::Rule'
    Condition: add_rds_tags
    Properties:
      Description: Auto-tag resources with Lambda for CreateDBInstance Event.
      EventPattern:
        source:
          - aws.rds
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - rds.amazonaws.com
          eventName:
            - CreateDBInstance
      Name: !Join
        - ""
        - - !Sub "aws-obs-${AccountAlias}-Instance-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt AwsTagResourcesLambda.Arn
          Id: Main

  RdsDbClusterEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: add_rds_tags
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AwsTagResourcesLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt RdsDbClusterEventsRuleTrigger.Arn

  RdsDbClusterEventsRuleTrigger:
    Type: 'AWS::Events::Rule'
    Condition: add_rds_tags
    Properties:
      Description: Auto-tag resources with Lambda for CreateDBCluster Event.
      EventPattern:
        source:
          - aws.rds
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - rds.amazonaws.com
          eventName:
            - CreateDBCluster
      Name: !Join
        - ""
        - - !Sub "aws-obs-${AccountAlias}-Cluster-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt AwsTagResourcesLambda.Arn
          Id: Main

  CreateInstanceEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: add_ec2_metrics_tags
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AwsTagResourcesLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CreateInstanceEventsRuleTrigger.Arn

  CreateInstanceEventsRuleTrigger:
    Type: 'AWS::Events::Rule'
    Condition: add_ec2_metrics_tags
    Properties:
      Description: Auto-tag resources with Lambda for RunInstances event.
      EventPattern:
        source:
          - aws.ec2
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - ec2.amazonaws.com
          eventName:
            - RunInstances
      Name: !Join
        - ""
        - - !Sub "aws-obs-${AccountAlias}-ec2-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt AwsTagResourcesLambda.Arn
          Id: Main

  CreateTableEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: add_dynamodb_tags
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AwsTagResourcesLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CreateTableEventsRuleTrigger.Arn

  CreateTableEventsRuleTrigger:
    Type: 'AWS::Events::Rule'
    Condition: add_dynamodb_tags
    Properties:
      Description: Auto-tag resources with Lambda for CreateTable event.
      EventPattern:
        source:
          - aws.dynamodb
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - dynamodb.amazonaws.com
          eventName:
            - CreateTable
      Name: !Join
        - ""
        - - !Sub "aws-obs-${AccountAlias}-dynamo-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt AwsTagResourcesLambda.Arn
          Id: Main

  CreateLoadBalancerEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: add_alb_tags
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AwsTagResourcesLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CreateLoadBalancerEventsRuleTrigger.Arn

  CreateLoadBalancerEventsRuleTrigger:
    Type: 'AWS::Events::Rule'
    Condition: add_alb_tags
    Properties:
      Description: Auto-tag resources with Lambda for CreateLoadBalancer event.
      EventPattern:
        source:
          - aws.elasticloadbalancing
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - elasticloadbalancing.amazonaws.com
          eventName:
            - CreateLoadBalancer
      Name: !Join
        - ""
        - - !Sub "aws-obs-${AccountAlias}-alb-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt AwsTagResourcesLambda.Arn
          Id: Main

  CreateFunction20150331EventsInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: add_lambda_tags
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AwsTagResourcesLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CreateFunction20150331EventsRuleTrigger.Arn

  CreateFunction20150331EventsRuleTrigger:
    Type: 'AWS::Events::Rule'
    Condition: add_lambda_tags
    Properties:
      Description: Auto-tag resources with Lambda for CreateFunction20150331 event.
      EventPattern:
        source:
          - aws.lambda
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - lambda.amazonaws.com
          eventName:
            - CreateFunction20150331
      Name: !Join
        - ""
        - - !Sub "aws-obs-${AccountAlias}-lambda-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt AwsTagResourcesLambda.Arn
          Id: Main

  CreateStageEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: add_api_gateway_tags
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AwsTagResourcesLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CreateStageEventsRuleTrigger.Arn

  CreateStageEventsRuleTrigger:
    Type: 'AWS::Events::Rule'
    Condition: add_api_gateway_tags
    Properties:
      Description: Auto-tag resources with Lambda for CreateStage event.
      EventPattern:
        source:
          - aws.apigateway
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - apigateway.amazonaws.com
          eventName:
            - CreateStage
      Name: !Join
        - ""
        - - !Sub "aws-obs-${AccountAlias}-api-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt AwsTagResourcesLambda.Arn
          Id: Main

  CreateRestApiEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: add_api_gateway_tags
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AwsTagResourcesLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CreateRestApiEventsRuleTrigger.Arn

  CreateRestApiEventsRuleTrigger:
    Type: 'AWS::Events::Rule'
    Condition: add_api_gateway_tags
    Properties:
      Description: Auto-tag resources with Lambda for CreateRestApi event.
      EventPattern:
        source:
          - aws.apigateway
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - apigateway.amazonaws.com
          eventName:
            - CreateRestApi
      Name: !Join
        - ""
        - - !Sub "aws-obs-${AccountAlias}-restapi-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt AwsTagResourcesLambda.Arn
          Id: Main

  CreateDeploymentEventsInvokePermission:
    Type: AWS::Lambda::Permission
    Condition: add_api_gateway_tags
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref AwsTagResourcesLambda
      Principal: "events.amazonaws.com"
      SourceArn: !GetAtt CreateDeploymentEventsRuleTrigger.Arn

  CreateDeploymentEventsRuleTrigger:
    Type: 'AWS::Events::Rule'
    Condition: add_api_gateway_tags
    Properties:
      Description: Auto-tag resources with Lambda for CreateDeployment event.
      EventPattern:
        source:
          - aws.apigateway
        detail-type:
          - AWS API Call via CloudTrail
        detail:
          eventSource:
            - apigateway.amazonaws.com
          eventName:
            - CreateDeployment
      Name: !Join
        - ""
        - - !Sub "aws-obs-${AccountAlias}-deployment-"
          - !Select
            - 0
            - !Split
              - "-"
              - !Select
                - 2
                - !Split ["/", !Ref "AWS::StackId"]
      State: ENABLED
      Targets:
        - Arn: !GetAtt AwsTagResourcesLambda.Arn
          Id: Main

Outputs:

  AwsTagResourcesLambda:
    Description: "AwsTagResourcesLambda Function ARN"
    Value: !GetAtt AwsTagResourcesLambda.Arn
